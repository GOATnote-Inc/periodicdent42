name: CI

on:
  pull_request:
  push:
    branches: [main]
  schedule:
    - cron: "0 6 * * *"  # Nightly at 6 AM UTC for chem tests
  workflow_dispatch:  # Manual trigger

env:
  PYTHONPATH: .
  DATABASE_URL: sqlite:///ci-telemetry.db

jobs:
  fast:
    name: Fast Tests (no heavy deps)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            pyproject.toml
      
      - name: Install core dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ".[dev]"
      
      - name: Lint with ruff
        run: |
          ruff check services/ tests/ core/ tools/ --output-format=github || echo "⚠️  Linting issues found (non-blocking)"
      
      - name: Type check with mypy
        continue-on-error: true
        run: |
          mypy services/ core/ tools/ || echo "⚠️  Type checking issues found (non-blocking)"
      
      - name: Run fast tests with coverage
        run: |
          pytest -m "not chem and not slow" --cov-report=xml --cov-report=term-missing --cov-report=html -v --maxfail=3
      
      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
      
      - name: Enforce coverage minimum
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          from pathlib import Path
          
          report = Path('coverage.xml')
          if not report.exists():
              print('No coverage.xml found - skipping coverage check')
              exit(0)
          
          line_rate = float(ET.parse(report).getroot().attrib['line-rate'])
          threshold = 0.60
          coverage_pct = line_rate * 100
          
          print()
          print('=' * 60)
          print('  COVERAGE REPORT')
          print('=' * 60)
          print(f'  Current: {coverage_pct:.2f}%')
          print(f'  Required: {threshold*100:.0f}%')
          status = 'PASS' if coverage_pct >= threshold*100 else 'FAIL'
          print(f'  Status: {status}')
          print('=' * 60)
          print()
          
          if line_rate < threshold:
              raise SystemExit(f'Coverage {coverage_pct:.2f}% below required {threshold*100:.0f}%')
          "
      
      - name: Run canary eval (optional)
        continue-on-error: true
        run: |
          python -m services.evals.runner || echo "⚠️  Canary eval failed (non-blocking in CI)"
      
      - name: Job summary
        if: always()
        run: |
          echo "## Fast Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Python Version:** $(python --version)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Test Scope:** Fast tests only (no chem/slow)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tests Passed**" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage.xml ]; then
            echo "✅ **Coverage Requirements Met**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Report (HTML)" >> $GITHUB_STEP_SUMMARY
  
  chem:
    name: Chemistry Tests (nightly/on-demand)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            pyproject.toml
      
      - name: Install system dependencies for chemistry libs
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran cmake
      
      - name: Install all dependencies including chemistry
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ".[dev,chem]"
      
      - name: Run chemistry tests
        run: |
          pytest -m "chem" -v --tb=short
      
      - name: Job summary
        if: always()
        run: |
          echo "## Chemistry Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Python Version:** $(python --version)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Test Scope:** Chemistry tests (pyscf, rdkit, ase)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
