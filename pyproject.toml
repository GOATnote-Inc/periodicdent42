[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autonomous-rd-platform"
version = "0.1.0"
description = "Autonomous R&D Intelligence Layer"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "Proprietary - See LICENSE file for details"}

[project.optional-dependencies]
# Heavy scientific computing dependencies (require native libs/compilation)
chem = [
    "pyscf==2.3.0",
    "rdkit==2023.9.1",
    "ase==3.22.1",
]
# BETE-NET superconductor screening
bete = [
    "pymatgen==2024.3.1",     # Crystal structure loading and Materials Project API
    "matplotlib==3.8.2",      # α²F(ω) plot generation
    "typer==0.9.0",           # CLI tool
    "rich==13.7.0",           # CLI pretty printing
    "tqdm==4.66.1",           # Progress bars
]
# HTC superconductor optimization framework
htc = [
    "pymatgen==2024.3.1",     # Crystal structure analysis (shared with bete)
    "matplotlib==3.8.2",      # Visualization (shared with bete)
    "scipy==1.11.0",          # Statistical analysis and optimization
    "scikit-learn==1.3.2",    # ML models (shared with dev)
    "seaborn==0.12.0",        # Publication-quality plots
    "statsmodels==0.14.0",    # Statistical modeling
    "pandas==2.1.4",          # Data manipulation (shared with dev)
    "gitpython==3.1.40",      # Git provenance tracking
    "typer==0.9.0",           # Calibration CLI tool (Tier 1)
    "scikit-optimize==0.10.2", # v0.5.0: Bayesian optimization (pinned for determinism)
    "pyyaml>=6.0",            # v0.5.0: μ* config persistence
]
# Development and testing
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "pytest-benchmark==4.0.0",  # Phase 2: Continuous benchmarking
    "hypothesis==6.92.1",        # Phase 2: Property-based testing
    "mutmut==2.4.4",             # Phase 2: Mutation testing
    "numpy==1.26.2",             # Phase 2: Numerical accuracy tests
    "mypy==1.7.1",
    "black==25.9.0",
    "ruff==0.1.6",
    # Required by test files and services
    "pydantic>=2.0",
    "alembic>=1.12",
    "sqlalchemy>=2.0",
    "pyyaml>=6.0",  # Required by llm_router
    # Phase 3: ML-powered test selection
    "scikit-learn==1.3.2",
    "pandas==2.1.4",
    "joblib==1.3.2",
]
# Data versioning and experiment reproducibility
science = [
    "dvc[gs]==3.30.0",          # Phase 2: Data Version Control with Google Cloud Storage
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
addopts = "-v --tb=short --cov=services --cov-report=term-missing"
markers = [
    "chem: tests requiring heavy chemistry libraries (pyscf, rdkit, ase)",
    "slow: tests that take >5 seconds to run",
    "integration: integration tests requiring external services",
    "benchmark: performance benchmarking tests (Phase 2)",
    "property: property-based tests using Hypothesis (Phase 2)",
    "numerical: numerical accuracy tests (Phase 2)",
    "ml_test_selection: tests for ML-powered test selection (Phase 3)",
    "chaos_safe: tests that should not experience chaos engineering failures (Phase 3)",
    "chaos_critical: tests that always experience chaos for thorough validation (Phase 3)",
    "bete: tests for BETE-NET superconductor screening",
    "htc: tests for HTC superconductor optimization",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "pyscf.*",
    "rdkit.*",
    "ase.*",
    "gpytorch.*",
    "botorch.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.coverage.run]
source = ["services"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "services/agents/*",
    "services/evals/*",
    "services/llm/*",
    "services/rag/pipeline.py",
    "services/rag/index.py",
    "services/telemetry/store.py",
    "services/telemetry/dash_data.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

