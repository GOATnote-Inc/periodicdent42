#!/bin/bash
# Initialize secrets in Secret Manager and populate .env file
# This script will:
# 1. Generate NEW secrets if they don't exist in Secret Manager
# 2. Create them in Secret Manager automatically
# 3. Populate your .env file with the values

set -e

PROJECT_ID=${PROJECT_ID:-periodicdent42}

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🔐 Initialize Secrets & Environment"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Project: $PROJECT_ID"
echo ""

# Check authentication
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" &>/dev/null; then
    echo "❌ Not authenticated with gcloud"
    echo ""
    echo "Please run:"
    echo "  gcloud auth application-default login"
    echo ""
    exit 1
fi

# Function to check if secret exists
secret_exists() {
    gcloud secrets describe "$1" --project="$PROJECT_ID" &>/dev/null
}

# Function to get or create secret
get_or_create_secret() {
    local secret_name=$1
    local generate_value=$2
    
    if secret_exists "$secret_name"; then
        echo "  ✅ $secret_name exists - retrieving..."
        value=$(gcloud secrets versions access latest --secret="$secret_name" --project="$PROJECT_ID" 2>/dev/null)
        
        if [ -z "$value" ]; then
            echo "  ⚠️  $secret_name exists but has no value, generating new..."
            value=$generate_value
            echo -n "$value" | gcloud secrets versions add "$secret_name" --data-file=- --project="$PROJECT_ID" >/dev/null 2>&1
        fi
    else
        echo "  🔄 $secret_name doesn't exist - creating..."
        value=$generate_value
        echo -n "$value" | gcloud secrets create "$secret_name" \
            --data-file=- \
            --replication-policy="automatic" \
            --project="$PROJECT_ID" >/dev/null 2>&1
        
        # Grant service account access
        SERVICE_ACCOUNT="ard-backend@${PROJECT_ID}.iam.gserviceaccount.com"
        gcloud secrets add-iam-policy-binding "$secret_name" \
            --member="serviceAccount:$SERVICE_ACCOUNT" \
            --role="roles/secretmanager.secretAccessor" \
            --project="$PROJECT_ID" >/dev/null 2>&1 || true
    fi
    
    echo "$value"
}

echo "🔍 Checking/Creating secrets in Secret Manager..."
echo ""

# 1. API Key - generate if doesn't exist
echo "1. API Key (api-key)"
API_KEY=$(get_or_create_secret "api-key" "$(openssl rand -hex 32)")
echo "  📝 Value: ${API_KEY:0:16}...${API_KEY: -8}"
echo ""

# 2. DB Password - generate if doesn't exist
echo "2. Database Password (DB_PASSWORD)"
DB_PASSWORD=$(get_or_create_secret "DB_PASSWORD" "$(openssl rand -base64 32 | tr -d '/+=' | head -c 32)")
echo "  📝 Value: ${DB_PASSWORD:0:8}... (hidden)"
echo ""

# 3. GCP SQL Instance - use project default
echo "3. Cloud SQL Instance (GCP_SQL_INSTANCE)"
GCP_SQL_INSTANCE=$(get_or_create_secret "GCP_SQL_INSTANCE" "${PROJECT_ID}:us-central1:ard-db")
echo "  📝 Value: $GCP_SQL_INSTANCE"
echo ""

# 4. GCS Bucket - use project default
echo "4. Cloud Storage Bucket (GCS_BUCKET)"
GCS_BUCKET=$(get_or_create_secret "GCS_BUCKET" "${PROJECT_ID}-experiments")
echo "  📝 Value: $GCS_BUCKET"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📝 Creating .env file"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Navigate to app directory
cd "$(dirname "$0")/../app"

# Check if .env exists
if [ -f ".env" ]; then
    echo "⚠️  .env file already exists"
    read -p "Overwrite? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Keeping existing .env file"
        echo ""
        echo "✅ Secrets retrieved and available for manual update if needed"
        echo "   See .api-key file for API key"
        exit 0
    fi
fi

# Create .env file with all values
cat > .env << EOF
# Autonomous R&D Intelligence Layer - Local Development
# Auto-generated by scripts/init_secrets_and_env.sh
# DO NOT COMMIT THIS FILE - It's in .gitignore

# ============================================================================
# Google Cloud Configuration
# ============================================================================
PROJECT_ID=$PROJECT_ID
LOCATION=us-central1
ENVIRONMENT=development

# ============================================================================
# Security Configuration
# ============================================================================

# Authentication (disabled for local dev)
ENABLE_AUTH=false

# API Key (from Secret Manager: api-key)
API_KEY=$API_KEY

# CORS Origins (empty = allows localhost in dev mode)
ALLOWED_ORIGINS=

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60

# ============================================================================
# Database Configuration
# ============================================================================

# Cloud SQL Instance (from Secret Manager: GCP_SQL_INSTANCE)
GCP_SQL_INSTANCE=$GCP_SQL_INSTANCE

# Database credentials (from Secret Manager: DB_PASSWORD)
DB_USER=ard_user
DB_PASSWORD=$DB_PASSWORD
DB_NAME=ard_intelligence
DB_HOST=localhost
DB_PORT=5432

# ============================================================================
# Cloud Storage
# ============================================================================

# GCS Bucket (from Secret Manager: GCS_BUCKET)
GCS_BUCKET=$GCS_BUCKET

# ============================================================================
# Server Configuration
# ============================================================================

PORT=8080
LOG_LEVEL=INFO

# ============================================================================
# Feature Flags
# ============================================================================

ENABLE_METRICS=true
ENABLE_TRACING=true

# ============================================================================
# Generated: $(date)
# ============================================================================
EOF

chmod 600 .env

echo "✅ Created app/.env with secrets from Secret Manager"
echo ""

# Save API key separately for reference
echo "$API_KEY" > ../.api-key
chmod 600 ../.api-key
echo "✅ Saved API key to .api-key (chmod 600)"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🎉 Setup Complete!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Your environment is ready:"
echo ""
echo "  📁 app/.env        - Environment variables"
echo "  🔑 .api-key        - Your API key (for reference)"
echo ""
echo "All secrets are also stored in Secret Manager:"
echo "  • api-key          - API authentication key"
echo "  • DB_PASSWORD      - Database password"
echo "  • GCP_SQL_INSTANCE - Cloud SQL instance name"
echo "  • GCS_BUCKET       - Cloud Storage bucket name"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🚀 Start Development Server"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  cd app"
echo "  source venv/bin/activate"
echo "  uvicorn src.api.main:app --reload --port 8080"
echo ""
echo "Then visit: http://localhost:8080/docs"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📋 Your Credentials"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "🔑 API Key: ${API_KEY:0:8}...${API_KEY: -8}"
echo ""
echo "⚠️  Full key saved securely in:"
echo "   • .api-key (chmod 600)"
echo "   • app/.env (chmod 600)"
echo ""
echo "💡 To view full key:"
echo "   cat .api-key"
echo ""

