name: BETE-NET CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'app/src/bete_net_io/**'
      - 'app/src/api/bete_net.py'
      - 'app/tests/test_bete*.py'
      - 'third_party/bete_net/**'
      - '.github/workflows/ci-bete.yml'
  pull_request:
    branches: [main]
    paths:
      - 'app/src/bete_net_io/**'
      - 'app/src/api/bete_net.py'
      - 'app/tests/test_bete*.py'

jobs:
  test:
    name: Test BETE-NET (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-bete-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-bete-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[bete,dev]"
      
      - name: Lint with ruff
        run: |
          ruff check app/src/bete_net_io/ app/src/api/bete_net.py
      
      - name: Type check with mypy
        run: |
          mypy app/src/bete_net_io/ --ignore-missing-imports
        continue-on-error: true  # Non-blocking until types are complete
      
      - name: Run unit tests
        run: |
          cd app
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          pytest tests/test_bete*.py -v -m bete --cov=src.bete_net_io --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./app/coverage.xml
          flags: bete
          name: bete-coverage

  golden-tests:
    name: Golden Tests (Reproducibility)
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          pip install -e ".[bete,dev]"
      
      - name: Run golden tests
        run: |
          cd app
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          pytest tests/test_bete_inference.py::test_golden_prediction_reproducibility -v
      
      - name: Verify Allen-Dynes formula
        run: |
          cd app
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          pytest tests/test_bete_inference.py::TestAllenDynesFormula -v
      
      - name: Generate evidence packs
        run: |
          cd app
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          python -c "
          from src.bete_net_io.inference import predict_tc
          from src.bete_net_io.evidence import create_evidence_pack
          from pathlib import Path
          
          # Create test CIF
          cif = Path('test_Nb.cif')
          cif.write_text('''
          data_Nb
          _cell_length_a 3.3
          _cell_length_b 3.3
          _cell_length_c 3.3
          _cell_angle_alpha 90.0
          _cell_angle_beta 90.0
          _cell_angle_gamma 90.0
          loop_
          _atom_site_label
          _atom_site_fract_x
          _atom_site_fract_y
          _atom_site_fract_z
          Nb 0.0 0.0 0.0
          ''')
          
          # Predict and generate evidence
          prediction = predict_tc(str(cif), mu_star=0.10, seed=42)
          pack = create_evidence_pack(prediction, Path('evidence'))
          print(f'Evidence pack: {pack}')
          "
      
      - name: Upload evidence artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bete-evidence-${{ github.sha }}
          path: app/evidence/*.zip
          retention-days: 30

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          pip install -e ".[bete,dev]"
      
      - name: Run benchmarks
        run: |
          cd app
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          pytest tests/test_bete_inference.py -v --benchmark-only --benchmark-json=../bete_benchmark.json
        continue-on-error: true  # Non-blocking if no benchmarks
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: bete-benchmark-${{ github.sha }}
          path: bete_benchmark.json
        if: always()

  integration:
    name: Integration Tests (API)
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ard_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ard_intelligence
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          pip install -e ".[bete,dev]"
      
      - name: Apply database migrations
        run: |
          cd app
          export DATABASE_URL="postgresql://ard_user:test_password@localhost:5432/ard_intelligence"
          alembic upgrade head
      
      - name: Run API integration tests
        run: |
          cd app
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          export DB_USER=ard_user
          export DB_PASSWORD=test_password
          export DB_NAME=ard_intelligence
          export DB_HOST=localhost
          export DB_PORT=5432
          pytest tests/test_bete_api.py -v -m bete

  documentation:
    name: Verify Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check documentation completeness
        run: |
          # Verify key docs exist
          test -f BETE_DEPLOYMENT_GUIDE.md
          test -f BETE_NET_IMPLEMENTATION_COMPLETE.md
          test -f third_party/bete_net/README.md
          test -f third_party/bete_net/LICENSE
          
          # Verify docs mention key concepts
          grep -q "Allen-Dynes" BETE_DEPLOYMENT_GUIDE.md
          grep -q "Apache 2.0" third_party/bete_net/LICENSE
          grep -q "evidence pack" BETE_DEPLOYMENT_GUIDE.md
          
          echo "✅ Documentation complete"
      
      - name: Check code documentation
        run: |
          # Verify docstrings exist
          grep -q '"""' app/src/bete_net_io/inference.py
          grep -q '"""' app/src/bete_net_io/batch.py
          grep -q '"""' app/src/bete_net_io/evidence.py
          grep -q '"""' app/src/api/bete_net.py
          
          echo "✅ Code documentation complete"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --requirement pyproject.toml --format json
        continue-on-error: true  # Non-blocking
      
      - name: Check for secrets in code
        run: |
          # Ensure no hardcoded secrets
          ! grep -r "sk-" app/src/bete_net_io/ || exit 1
          ! grep -r "api_key.*=" app/src/bete_net_io/ || exit 1
          
          echo "✅ No secrets found"

  deploy:
    name: Deploy to Cloud Run (main branch only)
    runs-on: ubuntu-latest
    needs: [test, golden-tests, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for GCP credentials
        id: check_gcp
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "configured=false" >> $GITHUB_OUTPUT
            echo "⚠️  GCP_SA_KEY not configured - skipping deployment"
          else
            echo "configured=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Authenticate to Google Cloud
        if: steps.check_gcp.outputs.configured == 'true'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        if: steps.check_gcp.outputs.configured == 'true'
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Deploy to Cloud Run
        if: steps.check_gcp.outputs.configured == 'true'
        run: |
          gcloud run deploy ard-backend \
            --source . \
            --region us-central1 \
            --memory 4Gi \
            --cpu 4 \
            --timeout 300 \
            --set-env-vars "PYTHONPATH=/app" \
            --allow-unauthenticated
      
      - name: Verify deployment
        if: steps.check_gcp.outputs.configured == 'true'
        run: |
          ENDPOINT=$(gcloud run services describe ard-backend --region us-central1 --format 'value(status.url)')
          curl -f "${ENDPOINT}/health" || exit 1
          echo "✅ Deployment verified"
      
      - name: Deployment skipped notice
        if: steps.check_gcp.outputs.configured == 'false'
        run: |
          echo "⚠️  Deployment skipped - GCP_SA_KEY secret not configured"
          echo "To enable deployment, configure the GCP_SA_KEY secret in repository settings"

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, golden-tests, integration]
    if: failure()
    
    steps:
      - name: Send notification
        run: |
          echo "❌ BETE-NET CI/CD failed"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run: ${{ github.run_id }}"
          echo "Commit: ${{ github.sha }}"
          echo "View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add Slack/email notification here when notification service is configured

