name: CI - Autonomous Baseline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -e .[dev]
      
      - name: Run ruff
        run: |
          ruff check src/ tests/
      
      - name: Run mypy
        run: |
          mypy src/
        continue-on-error: true  # Don't fail CI on type errors initially

  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -e .[dev]
      
      - name: Run tests with coverage
        run: |
          pytest tests/ \
            -v \
            --tb=short \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            -m "not slow"
      
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
      
      - name: Check coverage threshold
        run: |
          coverage report --fail-under=60

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -e .[dev]
      
      - name: Run integration tests
        run: |
          pytest tests/ \
            -v \
            --tb=short \
            -m "integration"

  leakage-gate:
    name: Leakage Detection Gate (Critical)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -e .[dev]
      
      - name: Run leakage tests (MUST PASS)
        run: |
          pytest tests/test_guards.py \
            -v \
            --tb=short \
            --maxfail=1
      
      - name: Verify no leakage
        run: |
          echo "✓ Leakage detection gate passed"

  smoke-test:
    name: Smoke Test (Fast Dev Run)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -e .[dev]
      
      - name: Generate synthetic data
        run: |
          mkdir -p data/raw
          python -c "
import pandas as pd
import numpy as np
np.random.seed(42)
df = pd.DataFrame({
    'material_formula': [f'A{i}B{j}O3' for i in range(1,6) for j in range(1,6)],
    'critical_temp': np.random.uniform(0, 100, 25)
})
df.to_csv('data/raw/superconductor.csv', index=False)
"
      
      - name: Run smoke test
        run: |
          pytest tests/test_guards.py::TestLeakageSafeSplitter::test_basic_split_sizes \
            -v \
            --tb=short

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check required docs exist
        run: |
          test -f README.md || exit 1
          test -f docs/OVERVIEW.md || exit 1
          test -f docs/PHYSICS_JUSTIFICATION.md || exit 1
          test -f docs/ADRs/ADR-001_composition_first.md || exit 1
          test -f docs/ADRs/ADR-002_uncertainty_calibration.md || exit 1
          test -f docs/ADRs/ADR-003_active_learning_strategy.md || exit 1
          echo "✓ All required documentation present"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, test-integration, leakage-gate, smoke-test, docs]
    if: always()
    steps:
      - name: Check all gates
        run: |
          echo "=== CI Summary ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Integration: ${{ needs.test-integration.result }}"
          echo "Leakage Gate: ${{ needs.leakage-gate.result }}"
          echo "Smoke Test: ${{ needs.smoke-test.result }}"
          echo "Docs: ${{ needs.docs.result }}"
          
          if [ "${{ needs.leakage-gate.result }}" != "success" ]; then
            echo "❌ CRITICAL: Leakage gate failed!"
            exit 1
          fi
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Test suite failed"
            exit 1
          fi
          
          echo "✓ All gates passed"

