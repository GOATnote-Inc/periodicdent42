name: CUDA Performance Ratchet

on:
  pull_request:
    paths:
      - 'cudadent42/**/*.cu'
      - 'cudadent42/**/*.cpp'
      - 'cudadent42/bench/**'
      - 'cudadent42/setup.py'
  push:
    branches: [main]
  workflow_dispatch:

env:
  BASELINE_PATH: cudadent42/bench/results/baseline.json
  REGRESSION_THRESHOLD: -3.0
  IMPROVEMENT_THRESHOLD: 5.0

jobs:
  benchmark_and_ratchet:
    name: Benchmark + Ratchet
    runs-on: [self-hosted, gpu, cuda]
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need history for baseline
    
    - name: Check CUDA
      run: |
        nvidia-smi
        /usr/local/cuda-12.8/bin/nvcc --version
    
    - name: Lock GPU Clocks (if supported)
      run: |
        sudo nvidia-smi -pm 1 || echo "‚ö†Ô∏è  Persistent mode not supported"
        sudo nvidia-smi -lgc 1410,1410 || echo "‚ö†Ô∏è  Clock locking not supported"
        nvidia-smi --query-gpu=clocks.current.graphics,clocks.current.memory --format=csv,noheader
      continue-on-error: true
    
    - name: Install Dependencies
      run: |
        pip install torch numpy scipy
    
    - name: Build
      run: |
        cd cudadent42
        PATH="/usr/local/cuda-12.8/bin:$PATH" LD_LIBRARY_PATH="/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH" python3 setup.py build_ext --inplace || echo "‚ö†Ô∏è  Build skipped (using PyTorch SDPA)"
      continue-on-error: true
    
    - name: Run Benchmark
      id: benchmark
      run: |
        cd cudadent42/bench
        LD_LIBRARY_PATH="/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH" python3 integrated_test.py --output results/current.json --batch 32 --heads 8 --seq 512 --dim 64
      continue-on-error: true
    
    - name: Performance Ratchet
      id: ratchet
      run: |
        cd cudadent42/bench
        python3 performance_ratchet.py results/current.json \
          --baseline ${{ env.BASELINE_PATH }} \
          --regression-threshold ${{ env.REGRESSION_THRESHOLD }} \
          --improvement-threshold ${{ env.IMPROVEMENT_THRESHOLD }} \
          --output-report results/ratchet_report.md \
          --output-profile-targets results/profile_targets.txt
      continue-on-error: true
    
    - name: Check for Profile Targets
      id: check_profile
      run: |
        if [ -f cudadent42/bench/results/profile_targets.txt ]; then
          echo "has_targets=true" >> $GITHUB_OUTPUT
          echo "targets=$(cat cudadent42/bench/results/profile_targets.txt | tr '\n' ',')" >> $GITHUB_OUTPUT
        else
          echo "has_targets=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Auto-Profile (on regression or large improvement)
      if: steps.check_profile.outputs.has_targets == 'true'
      run: |
        cd cudadent42
        mkdir -p bench/results/nsight
        
        # Read targets and profile each one
        while IFS= read -r config; do
          echo "üìä Profiling $config..."
          ncu --set full \
              --export bench/results/nsight/${config}_ours \
              --force-overwrite \
              --target-processes all \
              python3 bench/integrated_test.py --config $config 2>&1 | head -50 || echo "‚ö†Ô∏è  Profiling failed for $config"
        done < bench/results/profile_targets.txt
      continue-on-error: true
    
    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-ratchet-results
        path: |
          cudadent42/bench/results/*.json
          cudadent42/bench/results/*.md
          cudadent42/bench/results/nsight/*.ncu-rep
        retention-days: 90
    
    - name: Comment PR (if PR)
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const reportPath = 'cudadent42/bench/results/ratchet_report.md';
          
          if (!fs.existsSync(reportPath)) {
            console.log('No ratchet report found');
            return;
          }
          
          const report = fs.readFileSync(reportPath, 'utf8');
          
          const body = `## üìä Performance Ratchet Report
          
          **Commit**: ${context.sha.substring(0, 7)}
          **Hardware**: L4 GPU
          
          ${report}
          
          ---
          *Automated by CUDA Performance Ratchet ‚Ä¢ [View artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})*
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
    
    - name: Update Baseline (on main push with improvements)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd cudadent42/bench
        
        # Check if baseline was updated
        if git diff --quiet ${{ env.BASELINE_PATH }}; then
          echo "No baseline updates"
        else
          echo "Baseline updated - committing"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.BASELINE_PATH }}
          git commit -m "perf: Ratchet baseline forward [skip ci]

          Automated baseline update from successful benchmark run.
          
          See workflow: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          git push
        fi
      continue-on-error: true
    
    - name: Fail on Regression
      if: steps.ratchet.outcome == 'failure'
      run: |
        echo "‚ùå Performance regression detected"
        exit 1

